c
      order by user DESC;")c
      WHERE TABLE_SCHEMA = '#{Rails.configuration.database_configuration[Rails.env]['rails_test2']}' 
      FROM INFORMATION_SCHEMA.TABLES 
      SELECT user 
ActiveRecord::Base.connection.execute(" 
      order by user DESC;")
      WHERE TABLE_SCHEMA = '#{Rails.configuration.database_configuration[Rails.env]['database']}' 
      FROM INFORMATION_SCHEMA.TABLES 
      SELECT user 
ActiveRecord::Base.connection.execute(" 
   10:       order by user DESC;")
    9:       WHERE TABLE_SCHEMA = '#{Rails.configuration.database_configuration[Rails.env]['database']}' 
    8:       FROM INFORMATION_SCHEMA.TABLES 
    7:       SELECT user 
ActiveRecord::Base.connection.execute(" 
SELECT user 
c
params[:poll][:ngo_id_1]
params[:poll][:ngo_id_1_id]
c
   41:                     ngo_id_3_id: params[:poll][:ngo_id_3],
   40:                     ngo_id_2_id: params[:poll][:ngo_id_2],
   39:                     ngo_id_1_id: params[:poll][:ngo_id_1],
   38:                     user_id: current_admin.id,
Poll.create!(
   41:                     ngo_id_3_id: params[:poll][:ngo_id_3],
   40:                     ngo_id_2_id: params[:poll][:ngo_id_2],
   39:                     ngo_id_1_id: params[:poll][:ngo_id_1],
   38:                     user_id: current_admin.id,
Poll.create!(
c
current_admin.id
c
params[:poll][:ngo_id_1_id]
params[poll][:ngo_id_1_id]
pollngo_id_1_id
params
params[:ngo_id_1_id]
@ngo_id_1
@ngo_id_1 = Ngo.find_by_id(params[:ngo_id_1_id])
@ngo_id_1 = Ngo.find_by_id(params[:ngo_id_1_id])@ngo_id_1 = Ngo.find_by_id(params[:ngo_id_1_id])
params
c
params[:ngo_id_1]
current_admin.id
c
current_admin.id
current_admin
current_admin_user.id
c
country.length
country
c
f.country_select  :country
c
f.country_select  :country
c
f.country_select :country , :options
f.country_select :country , options
f.country_select :country.value
f.country_select :country
f.country_select
f.country_select.value
f.country_select  :country
 f.label
f
developer_id = params[:f][:country]
c
country.value
#country.value
#country
id
c
#drop_country.value
#drop_country
f.drop_country
drop_country
drop_country.value
f.object.country
f.object.country_select
f.object.country
f.country_select  :country, priority_countries: ["PK"]
c
country
:country
f.country_select  :country, priority_countries: ["PK"]
c
<option>
select<option>
select.value
@option.value
option_value
option#value
option.value
option
option.value
f.country_select  :country, priority_countries: ["PK"], selected: :option
option.value
selected: :option
c
:selected
c
:pid
pid
f.country_select  :country, priority_countries: ["PK"], :selected => params[:pid]
c
pid
:pid
f.country_select  :country, priority_countries: ["PK"], :selected => params[:pid]
country
country.value
country
:country.value
:country
f.country_select  :country, priority_countries: ["PK"], :selected => params[:country]
c
@state.map{ |k,v| v}
 @state
@state = CS.states(:pk)
@polls[0].ngo_id_1_id.name
@polls[0].ngo_id_1_id
@polls[0].id
@polls[1]
@polls[0]
@polls[2]
@polls[2].name
polls[2].name
@polls
@polls.ngo_id_1_id
@polls.ngo_id_1
@Poll.ngo_id_1
@Poll.ngo_id_1_id
@ngo_id_1_id
@ngo_id_1
:ngo_id_1
:ngo_id_1_id
JSON.parse(@polls.to_json(:only => [:ngo_id_1_id,:ngo_id_1_id.name,:ngo_1_votes,:ngo_id_2_id,:ngo_2_votes,:ngo_id_3_id,:ngo_3_votes,:ngo_id_4_id,:ngo_4_votes]))
:ngo_id_3_id
ngo_id_3_id
ngo_id_3_id:
@polls = Poll.all
:ngo_id_1_id
c
Poll.find_by_id(2)
params[:ngo_id_1]
params[:ngo_id_1
@ngo_id_2 = Poll.find_by_ngo_id_2_id(params[:ngo_id_2])
@ngo_id_1
@ngo_id_1 = Poll.find_by_id(params[:ngo_id_1])
c
@ngos.to_json(:only => [:id, :name])
@ngos
c
@ngos.length
c
@ngos
c
@user = User.find_by_id(params[:id])
@feedback
c
@drop[2]
@drop[1]
@drop[0]
c
@drop
c
@drop
@drop.nil?
@drop.present?
@drop.nill?
@drop.nill
@drop = Drop.where(city: @user.city)
@drop.nill
c
@drop
@drop = Drop.where(city: @user.city)
Drop.where(city: @user.city)
@user.city
@user
c
Drop.find_by_city(@user.city)
@user.city
@user = User.find_by_id(params[:id])
c
@user = User.find_by_id(params[:id])
user
@user
c
@user.role
@user.role = "paid"
@user.role
@user.payment_status
@user.update(payment_status: params[:payment_status])
c
params.permit(:payment_status)
c
@user.nil?  
c
@user
c
self.resource.valid_password?(params[:user][:password])
c
password: params[:user][:password]
self.resource.valid_password?("password")
self.resource.valid_password?("passwod")
self.resource.valid_password?("password")
resource
params[:password]
params[:user][:password]
self.resource.valid_password?(password: params[:user][:password])
c
self.resource.valid_password?(params[:password])
c
self.resource.valid_password?(params[:password])
password
:password
params[:password]
c
self.resource.valid_password?(params[:password])
self.resource.valid_password?
self.resource
user
c
@user = User.find(:email)
@user = User.find(:email => self.resource.email)?
@user = User.find(:email => self.resource.email)
c
resource.present?
c
:signed_in
resource.present?
self.resource
c
resource.present?
resource.persistent?
resource
resource_name
sign_in(resource_name, resource)
:notice
auth_options
self.resource
c
current_user
current_token
      message: 'You are logged in.',
      user: current_user, status: 200}
      jwt: current_token,
      message: 'You are logged in.',
{
resource
_opts
